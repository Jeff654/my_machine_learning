# -*- coding: utf-8 -*-

import numpy as np
np.random.seed(10)

import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomTreesEmbedding, RandomForestClassifier, GradientBoostingClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.cross_validation import train_test_split
from sklearn.metrics import roc_curve
from sklearn.pipeline import make_pipeline


n_estimators = 10
x, y = make_classification(n_samples = 80000)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.5)
x_train, x_train_lr, y_train, y_train_lr = train_test_split(x_train, y_train, test_size = 0.5)

# unsupervised transformation based on totally random trees
rt = RandomTreesEmbedding(max_depth = 3, n_estimators = n_estimators, random_state = 0)
rt_lm = LogisticRegression()
pipeline = make_pipeline(rt, rt_lm)
pipeline.fit(x_train, y_train)

y_pred_rt = pipeline.predict_proba(x_test)[:, 1]

# false positive rates and true positive rates
fpr_rt_lm, tpr_rt_lm, _ = roc_curve(y_test, y_pred_rt)


# Supervised transformation based on random forests
rf = RandomForestClassifier(max_depth = 3, n_estimators = n_estimators)
rf_encode = OneHotEncoder()
rf_lm = LogisticRegression()
rf.fit(x_train, y_train)
rf_encode.fit(rf.apply(x_train))
rf_lm.fit(rf_encode.transform(rf.apply(x_train_lr)), y_train_lr)

y_pred_rf_lm = rf_lm.predict_proba(rf_encode.transform(rf.apply(x_test)))[:, 1]
fpr_rf_lm, tpr_rf_lm, _ = roc_curve(y_test, y_pred_rf_lm)



grd = GradientBoostingClassifier(n_estimators = n_estimators)
grd_encode = OneHotEncoder()
grd_lm = LogisticRegression()
grd.fit(x_train, y_train)
grd_encode.fit(grd.apply(x_train)[:, :, 0])
grd_lm.fit(grd_encode.transform(grd.apply(x_train_lr)[:, :, 0]), y_train_lr)

y_pred_grd_lm = grd_lm.predict_proba(grd_encode.transform(grd.apply(x_test)[:, :, 0]))[:, 1]
fpr_grd_lm, tpr_grd_lm, _ = roc_curve(y_test, y_pred_grd_lm)


# the gradient boosted model by itself
y_pred_grd = grd.predict_proba(x_test)[:, 1]
fpr_grd, tpr_grd, _ = roc_curve(y_test, y_test_grd)

# the random forest model by itself
y_pred_rf = rf.predict_proba(x_test)[:, 1]
fpr_rf, tpr_rf, _ = roc_curve(y_test, y_pred_rf)


plt.figure(1)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot(fpr_rt_lm, tpr_rt_lm, label='RT + LR')
plt.plot(fpr_rf, tpr_rf, label='RF')
plt.plot(fpr_rf_lm, tpr_rf_lm, label='RF + LR')
plt.plot(fpr_grd, tpr_grd, label='GBT')
plt.plot(fpr_grd_lm, tpr_grd_lm, label='GBT + LR')
plt.xlabel('False positive rate')
plt.ylabel('True positive rate')
plt.title('ROC curve')
plt.legend(loc='best')
plt.show()

plt.figure(2)
plt.xlim(0, 0.2)
plt.ylim(0.8, 1)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot(fpr_rt_lm, tpr_rt_lm, label='RT + LR')
plt.plot(fpr_rf, tpr_rf, label='RF')
plt.plot(fpr_rf_lm, tpr_rf_lm, label='RF + LR')
plt.plot(fpr_grd, tpr_grd, label='GBT')
plt.plot(fpr_grd_lm, tpr_grd_lm, label='GBT + LR')
plt.xlabel('False positive rate')
plt.ylabel('True positive rate')
plt.title('ROC curve (zoomed in at top left)')
plt.legend(loc='best')
plt.show()


