# -*- coding: utf-8 -*-

import numpy as np
from sklearn.gaussian_process import GaussianProcess
import matplotlib.pyplot as plt

np.random.seed(1)

def f(x):
	return x * np.sin(x)

X = np.atleast_2d([1, 3, 5, 6, 7, 8]).T
y = f(X).ravel()

x = np.atleast_2d(np.linspace(0, 10, 1000)).T
gp = GaussianProcess(corr = 'cubic', theta0 = 1e-2, thetaL = 1e-4, thetaU = 1e-1, random_start = 100)
gp.fit(X, y)


y_pred, MSE = gp.predict(x, eval_MSE = True)
sigma = np.sqrt(MSE)

fig = plt.figure()
plt.plot(x, f(x), 'r:', label = u'$f(x) = x\, \sin(x)$')
plt.plot(X, y, 'r.', markersize = 10, label = u'Observations')
plt.plot(x, y_pred, 'b-', label = u'prediction')
plt.fill(np.concatenate([x, x[::-1]]), np.concatenate([y_pred - 1.96 * sigma, (y_pred + 1.96 * sigma)[::-1]]), alpha = 0.5, fc = 'b', ec = 'None', label = '95% confidenct interval')

plt.xlabel('$x$')
plt.ylabel('$f(x)$')
plt.ylim(-10, 20)
plt.legend(loc = 'upper left')


# the noise case
X = np.linspace(0.1, 9.9, 20)
X = np.atleast_2d(X).T

# observations and noise
y = f(X).ravel()
dy = 0.5 + 1.0 * np.random.random(y.shape)
noise = np.random.normal(0, dy)
y += noise


# mesh the input space for evaluations of the real function, the prediction and its MSE
x = np.atleast_2d(np.linspace(0, 10, 1000)).T

# instanciate a Gaussian Process Model
gp = GaussianProcess(corr = 'squared_exponential', theta0 = 1e-1, thetaL = 1e-3, thetaU = 1, nugget = (dy / y) ** 2, random_start = 100)

gp.fit(X, y)
y_pred, MSE = gp.predict(x, eval_MSE = True)
sigma = np.sqrt(MSE)

fig = np.figure()
plt.plot(x, f(x), 'r:', label = u'$f(x) = x\, \sin(x)$')
plt.errorbar(X.ravel(), y, dy, fmt = 'r.', markersize = 10, label = u'observations')
plt.plot(x, y_pred, 'b-', label = u'prediction')
plt.fill(np.concatenate([x, x[::-1]]), np.concatenate([y_pred - 1.96 * sigma, (y_pred + 1.96 * sigma)[::-1]]), alpha = 0.5, fc = 'b', ec = "None", label = '95% confidence interval')

plt.xlabel('$x$')
plt.ylabel('$f(x)$')
plt.ylim(-10, 20)
plt.legend(loc = 'upper left')
plt.show()


