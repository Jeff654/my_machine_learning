# -*- coding: utf-8 -*-

import matplotlib.pyplot as plt

decision_node = dict(boxstyle = 'sawtooth', fc = '0.8')
leaf_node = dict(boxstyle = 'round4', fc = '0.8')

arrow_args = dict(arrowstyle = '<-')

def plot_node(node_txt, centerPt, parentPt, node_type):
	create_plot.ax1.annotate(node_txt, xy = parentPt, xycoords = 'axes fraction', xytext = centerPt, textcoords = 'axes fraction', va = 'center', ha = 'center', bbox = node_type, arrowprops = arrow_args)

def create_plot(in_tree):
	fig = plt.figure(1, facecolor = 'white')
	fig.clf()

	axprops = dict(xticks = [], yticks = [])
	create_plot.ax1 = plt.subplot(111, frameon = False, **axprops)

	# plot_node(U'决策节点', (0.5, 0.1), (0.1, 0.5), decision_node)
	# plot_node(U'叶节点', (0.8, 0.1), (0.3, 0.8), leaf_node)

	plot_tree.totalW = float(get_numberLeafs(in_tree))
	plot_tree.totalD = float(get_numberDepth(in_tree))

	plot_tree.xOff = -0.5 / plot_tree.totalW;
	plot_tree.yOff = 1.0

	plot_tree(in_tree, (0.5, 0.1), '')
	plt.show()


def get_numberLeafs(my_tree):
	number_leafs = 0
	first_str = my_tree.keys()[0]
	second_dict = my_tree[first_str]

	for key in second_dict.keys():
		if type(second_dict[key]).__name__ == 'dict':
			number_leafs += get_numberLeafs(second_dict[key])
		else:
			number_leafs += 1
	
	return number_leafs


def get_numberDepth(my_tree):
	max_depth = 0
	this_depth = 0
	first_str = my_tree.keys()[0]
	second_dict = my_tree[first_str]

	for key in second_dict.keys():
		if type(second_dict[key]).__name__ == 'dict':
			this_depth += get_numberDepth(second_dict[key])
		else:
			this_depth += 1

		if this_depth > max_depth:
			max_depth = this_depth
	return max_depth


def retrieve_tree(i):
	list_tree = [{'no surfacing': {0: 'no', 1: {'flippers': {0: 'no', 1: 'yes'}}}},
			{'no surfacing': {0: 'no', 1: {'flipper': {0: {'head': {0: 'no', 1: 'yes'}}, 1: 'no'}}}}]

	return list_tree[i]


def plot_midText(cntrPt, parentPt, txtString):
	x_mid = (parentPt[0] - cntrPt[0]) / 2.0 + cntrPt[0]
	y_mid = (parentPt[1] - cntrPt[1]) / 2.0 + cntrPt[1]

	create_plot.ax1.text(x_mid, y_mid, txtString)


def plot_tree(my_tree, parentPt, nodeTxt):
	number_leafs = get_numberLeafs(my_tree)
	depth = get_numberDepth(my_tree)

	first_str = my_tree.keys()[0]
	cntrPt = (plot_tree.xOff + (1.0 + float(number_leafs)) / 2.0 / plot_tree.totalW, plot_tree.yOff)

	plot_midText(cntrPt, parentPt, nodeTxt)
	plot_node(first_str, cntrPt, parentPt, decision_node)

	second_dict = my_tree[first_str]
	plot_tree.yOff = plot_tree.yOff - 1.0 / plot_tree.totalD

	for key in second_dict.keys():
		if type(second_dict[key]).__name__ == 'dict':
			plot_tree(second_dict[key], cntrPt, str(key))
		else:
			plot_tree.xOff = plot_tree.xOff + 1.0 / plot_tree.totalW
			plot_node(second_dict[key], (plot_tree.xOff, plot_tree.yOff), cntrPt, leaf_node)
			plot_midText((plot_tree.xOff, plot_tree.yOff), cntrPt, str(key))

	plot_tree.yOff = plot_tree.yOff + 1.0 / plot_tree.totalD


def classify(input_tree, feature_labels, test_vector):
	first_str = input_tree.keys()[0]
	second_dict = input_tree[first_str]
	feature_index = feature_labels.index(first_str)

	for key in second_dict.keys():
		if test_vector[feature_index] == key:
			if type(second_dict[key]).__name__ == 'dict':
				class_label = classify(second_dict[key], feature_labels, test_vector)
			else:
				class_label = second_dict[key]
	return class_label




